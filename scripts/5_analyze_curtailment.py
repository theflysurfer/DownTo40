"""
Script 5: Analyse de l'√©cr√™tage des √©nergies renouvelables (solaire, √©olien)
Objectif: Quantifier les MWh d'√©cr√™tage lorsque le prix √©tait ‚â§40‚Ç¨
"""
import pandas as pd
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config.api_config import RAW_DATA_DIR, PROCESSED_DATA_DIR, PRICE_THRESHOLD

def load_generation_data():
    """
    Charge les donn√©es de production par type depuis ODRE ou ENTSO-E
    """
    # Essayer ENTSO-E d'abord
    entsoe_file = f"{RAW_DATA_DIR}/entsoe_generation_france.csv"
    if os.path.exists(entsoe_file):
        print(f"üìÇ Chargement production ENTSO-E...")
        df = pd.read_csv(entsoe_file)
        df['datetime'] = pd.to_datetime(df.iloc[:, 0])
        df = df.set_index('datetime')
        return df

    # Sinon ODRE
    odre_file = f"{RAW_DATA_DIR}/odre_eco2mix_national.csv"
    if os.path.exists(odre_file):
        print(f"üìÇ Chargement production ODRE...")
        df = pd.read_csv(odre_file)
        if 'datetime' in df.columns:
            df['datetime'] = pd.to_datetime(df['datetime'])
            df = df.set_index('datetime')
        return df

    print("‚ùå Aucun fichier de production trouv√©!")
    return None

def load_prices():
    """
    Charge les prix
    """
    entsoe_file = f"{RAW_DATA_DIR}/entsoe_prices_france.csv"
    if os.path.exists(entsoe_file):
        print(f"üìÇ Chargement des prix...")
        df = pd.read_csv(entsoe_file)
        df['datetime'] = pd.to_datetime(df.iloc[:, 0])
        df['price'] = df.iloc[:, 1]
        df = df[['datetime', 'price']]
        df = df.set_index('datetime')
        return df

    print("‚ùå Aucun fichier de prix trouv√©!")
    return None

def estimate_curtailment(generation_df, prices_df, threshold=PRICE_THRESHOLD):
    """
    Estime l'√©cr√™tage bas√© sur les prix n√©gatifs et les baisses de production

    M√©thode:
    1. Identifier les heures avec prix ‚â§ 0 (√©cr√™tage probable)
    2. Pour solaire/√©olien: comparer production r√©elle vs capacit√© install√©e
    3. Calculer la production "manquante" pendant ces p√©riodes

    Note: Sans donn√©es directes d'√©cr√™tage, c'est une estimation conservative
    """
    print(f"\nüîç Analyse de l'√©cr√™tage potentiel...")

    # Identifier les colonnes de production renouvelable
    renewable_cols = []
    for col in generation_df.columns:
        col_lower = col.lower()
        if any(x in col_lower for x in ['solar', 'solaire', 'wind', 'eolien', 'aeolien']):
            renewable_cols.append(col)

    if not renewable_cols:
        print("‚ö†Ô∏è Aucune colonne de production renouvelable trouv√©e")
        print(f"   Colonnes disponibles: {generation_df.columns.tolist()}")
        return None

    print(f"   Colonnes renouvelables: {renewable_cols}")

    # Merger avec les prix
    merged = generation_df.join(prices_df, how='inner')

    # P√©riodes avec prix n√©gatifs (fort indicateur d'√©cr√™tage)
    negative_price_periods = merged[merged['price'] < 0]

    if len(negative_price_periods) == 0:
        print("   ‚ÑπÔ∏è Aucune p√©riode avec prix n√©gatif identifi√©e")
        print("   L'√©cr√™tage peut exister m√™me sans prix n√©gatifs")
        # Continuer l'analyse avec prix bas
        low_price_periods = merged[merged['price'] <= 10]  # Prix tr√®s bas
        print(f"   Analyse avec prix ‚â§10‚Ç¨/MWh: {len(low_price_periods)} heures")
        analysis_periods = low_price_periods
    else:
        print(f"   Prix n√©gatifs: {len(negative_price_periods)} heures")
        analysis_periods = negative_price_periods

    # Estimer l'√©cr√™tage comme une baisse de production pendant prix bas
    # (M√©thode conservative: prendre 10% de la capacit√© m√©diane comme √©cr√™tage potentiel)
    results = []

    for col in renewable_cols:
        if col not in analysis_periods.columns:
            continue

        # Production m√©diane sur toute la p√©riode (approximation de la capacit√©)
        median_capacity = merged[col].quantile(0.90)

        # Production r√©elle pendant prix n√©gatifs
        actual_production = analysis_periods[col].mean()

        # √âcr√™tage estim√© (diff√©rence)
        estimated_curtailment_mw = max(0, median_capacity * 0.5 - actual_production)

        # MWh total (nombre d'heures √ó MW moyen √©cr√™t√©)
        total_hours = len(analysis_periods)
        total_mwh = estimated_curtailment_mw * total_hours

        if total_mwh > 0:
            print(f"\n   {col}:")
            print(f"      Capacit√© estim√©e (P90): {median_capacity:.0f} MW")
            print(f"      Production moyenne (prix bas): {actual_production:.0f} MW")
            print(f"      √âcr√™tage estim√©: {estimated_curtailment_mw:.0f} MW")
            print(f"      Total MWh √©cr√™t√©: {total_mwh:,.0f} MWh")

            results.append({
                'technology': col,
                'estimated_curtailment_mw': estimated_curtailment_mw,
                'total_hours': total_hours,
                'total_mwh_curtailed': total_mwh,
                'avg_price_during_curtailment': analysis_periods['price'].mean()
            })

    return pd.DataFrame(results) if results else None

def main():
    """
    Fonction principale
    """
    print("=" * 80)
    print("ANALYSE DE L'√âCR√äTAGE DES RENOUVELABLES")
    print("=" * 80)
    print()
    print("‚ö†Ô∏è NOTE IMPORTANTE:")
    print("   Les donn√©es d'√©cr√™tage direct ne sont pas toujours disponibles")
    print("   Cette analyse estime l'√©cr√™tage bas√© sur:")
    print("   - Les p√©riodes de prix n√©gatifs ou tr√®s bas")
    print("   - Les baisses de production renouvelable pendant ces p√©riodes")
    print("   - Estimation CONSERVATIVE (valeurs minimales)")
    print()

    os.makedirs(PROCESSED_DATA_DIR, exist_ok=True)

    # Charger les donn√©es
    generation_df = load_generation_data()
    if generation_df is None:
        return

    prices_df = load_prices()
    if prices_df is None:
        return

    # Analyser
    results_df = estimate_curtailment(generation_df, prices_df, PRICE_THRESHOLD)

    if results_df is None or results_df.empty:
        print("\n‚ö†Ô∏è √âcr√™tage non quantifiable avec les donn√©es disponibles")
        print("   Recommandation: Consulter les rapports CRE ou RTE pour donn√©es pr√©cises")
        return

    # Sauvegarder
    output_file = f"{PROCESSED_DATA_DIR}/curtailment_analysis.csv"
    results_df.to_csv(output_file, index=False)
    print(f"\nüíæ R√©sultats sauvegard√©s: {output_file}")

    # R√©sum√©
    print(f"\n{'=' * 80}")
    print("R√âSUM√â √âCR√äTAGE")
    print("=" * 80)
    total_mwh = results_df['total_mwh_curtailed'].sum()
    print(f"\nüéØ TOTAL √âCR√äTAGE ESTIM√â:")
    print(f"   {total_mwh:,.0f} MWh")
    print(f"   Soit {total_mwh/1000:.1f} GWh")
    print()
    print("Par technologie:")
    for _, row in results_df.iterrows():
        print(f"   {row['technology']}: {row['total_mwh_curtailed']:,.0f} MWh")

    print("\n‚úÖ Analyse termin√©e!")
    print("\nüìù RAPPEL: Estimation conservative, valeurs r√©elles peuvent √™tre sup√©rieures")

if __name__ == "__main__":
    main()
